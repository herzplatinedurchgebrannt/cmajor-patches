graph Filter [[ main ]]
{
    input stream float In;
    output stream float Out;

    input filter.frequency;
    input filter.cutBoost;
    input filter.bandwidthX;
    input filter.outputLevel;

    node filter = lx::filters(float)::presence::Processor();

    connection
    {
        In -> filter.procIn;
        filter.procOut -> Out;
    }
}

namespace lx::filters (using FrameType = float32,
                       using CoefficientType = float32,
                       int parameterUpdateRate = 32)
{
    let defaultFrequency = 7700; 
    let defaultCutBoost = 0; 
    let defaultBandwidth = 0.20f; 
    let defaultOutput = 0;

    namespace presence
    {

        Implementation create (float processorFrequency, float filterFrequency, float boost, float bandwidth, float outputdb )
        {
            Implementation filter;
            filter.setFrequency (processorFrequency, filterFrequency, boost, bandwidth, outputdb );
            return filter;
        }

        struct Implementation
        {
            float64 a0;
            float64 a1;
            float64 a2;
            float64 b0;
            float64 b1;
            float64 b2;       
            float64 yl;
            float64 x1l;
            float64 x2l;
            float64 y1l;
            float64 y2l;
            float64 yrv;
            float64 x1r;
            float64 x2r;
            float64 y1r;
            float64 y2r;
            float64 SPN;
            float64 F;
            float64 asnd;

            void reset()
            {
                this.yl  = 0;
                this.x1l = 0;
                this.x2l = 0;
                this.y1l = 0;
                this.y2l = 0;
                this.yrv = 0;
                this.x1r = 0;
                this.x2r = 0;
                this.y1r = 0;
                this.y2r = 0;
                this.SPN = 0;
            }

            void setFrequency (float64 processorFrequency, float64 filterFrequency, float64 boostVar, float64 bandwidth, float64 outputdb)
            {
                let cf = filterFrequency/ processorFrequency;
                let boost = std::levels::dBtoGain(boostVar);
                let bw = bandwidth; 
                let ca = tan(pi*(cf-0.25)); 
                let A = pow(10.0,(boost/20));

                if (boost < 6.0 && boost > -6.0) 
                {
                    this.F = sqrt(A);
                }
                else
                {
                    if (A > 1)
                    {
                        this.F = A/sqrt(2.0f);
                    } 
                    else 
                    {
                        this.F = A*sqrt(2.0f);
                    }
                };
                                        
                let T = tan(2 * pi * bw);
                let as2 = ca * ca;
                let as4 = as2 * as2;
                var d = 2.0 * as2 * T;
                let sn = (1 + as4) * T;
                let cs = (1 - as4);
                let mag = sqrt(sn * sn + cs * cs);
                d = mag;
                let delta = atan2(sn, cs);

                if (this.asnd > pi/2 || this.asnd < pi/2)
                {
                    this.asnd = 0;
                }
                else
                {
                    this.asnd = asin(d);
                }

                var theta = 0.5 * (pi - this.asnd - delta);
                var tmp = 0.5 * (this.asnd - delta);

                if (tmp > 0 && tmp < theta)
                {  
                    theta = tmp;  
                };

                let xfmbw = theta/(2 * pi);
                let C = 1/tan(2*pi*xfmbw);
                let F2 = this.F*this.F;
                tmp = A*A - F2;

                var alphad = 0.0;
                let SPN = 0.0;

                if (abs(tmp) <= SPN){

                    alphad = C;
                } 
                else
                {
                    alphad = sqrt(C*C*(F2-1)/tmp);  
                }
                
                let alphan = A*alphad;
                let a2plus1 = 1 + as2;
                let ma2plus1 = 1 - as2;

                this.a0 = a2plus1 + alphan*ma2plus1;
                this.a1 = 4.0*ca;
                this.a2 = a2plus1 - alphan*ma2plus1;
                this.b0 = a2plus1 + alphad*ma2plus1;
                this.b2 = a2plus1 - alphad*ma2plus1;

                var recipb0 = 1 / this.b0;
                this.a0 *= recipb0;
                this.a1 *= recipb0;
                this.a2 *= recipb0;
                this.b1 = this.a1;
                this.b2 *= recipb0;

                this.b1 = -this.b1;
                this.b2 = -this.b2;
            }
            // void reset()                { this.z1 = (); }

            float32 process (float32 x)
            {
                // mono == 1 ? (
                // xl = (spl0+spl1)/2;
                
                // yl = a0*xl + a1*x1l + a2*x2l + b1*y1l + b2*y2l;
                let yl = float32(this.a0*x + this.a1*this.x1l + this.a2*this.x2l + this.b1*this.y1l + this.b2*this.y2l);
                this.x2l = this.x1l;
                this.x1l = x;
                this.y2l = this.y1l;
                this.y1l = this.yl;

                //spl0=spl1=yl*outgain;

                //return yl * this.outgain;
                return yl;
            }
        }

        processor Processor(float initialFrequency = defaultFrequency, float initialCutBoost = defaultCutBoost, float initialBandwidth = defaultBandwidth, float initialOutput = defaultOutput )
        {
            // input stream FrameType in;
            // output stream FrameType out;
            input stream float32 procIn;
            output stream float32 procOut;

            input event
            {
                float frequency     [[ name: "Frequency",   min: 200,  max: 18500, init: 7700, unit: "Hz"]];
                float cutBoost      [[ name: "CutBoost",    min: -15,   max: 15,    init: 0,    unit: "dB"]];
                float bandwidthX     [[ name: "Bandwidth",   min: 0.07,  max: 0.40,  init: 0.20, unit: "?"]];
                float outputLevel     [[ name: "Output",      min: -40,   max: 40,    init: -20,    unit: "dB"]];
            }

            event frequency (float f)       {  updateFilter = true; filterFrequencyX = f; }
            event cutBoost (float f)          {  updateFilter = true; cutBoostdB = f; }
            event bandwidthX (float f)       {  updateFilter = true; bandwidthIn = f; }
            event outputLevel (float f)       {  updateFilter = true; outputLeveldB = f; }

            var filter = create (processor.frequency, initialFrequency, initialCutBoost, initialBandwidth, initialOutput);

            bool updateFilter = false;

            float filterFrequencyX = initialFrequency;
            float cutBoostdB = initialCutBoost;
            float bandwidthIn = initialBandwidth;
            float outputLeveldB = initialOutput;

            int count = 0;

            float in;

            void main()
            {
                loop
                {

                    

                    if (updateFilter)
                    {
                        filter.setFrequency (processor.frequency, filterFrequencyX, cutBoostdB, bandwidthIn, outputLeveldB);
                        updateFilter = false;
                    }

                    loop (parameterUpdateRate)
                    {
                        in = procIn * std::levels::dBtoGain(outputLeveldB);

                        // lowOut <- result[0];
                        // highOut <- result[1];
                        // bandOut <- result[2];

                        if (++count >= processor.frequency / 5)
                        {
                            console <- "\n";
                            console <- "xx: ";
                            console <- float (in);
                            count = 0;
                        }

                        procOut <- filter.process(in);

                        advance();
                    }
                }
            }
        }
    }
}