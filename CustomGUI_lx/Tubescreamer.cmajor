graph GuitarAmp  [[ main ]]
{
    input  stream float audioIn;    
    output stream float audioOut;

    input event int evPreEQSwitch       [[ name: "PreEQ",  min: 0,    max:  1,    init:   1,  text: "Off|On" ]];
    input event float evGaindB          [[ name: "Gain",   min: 0,    max: 60,    init:  30,  step: 0.1 ]];
    input event int evPosEQSwitch       [[ name: "PostEQ", min: 0,    max:  1,    init:   0,  text: "Off|On" ]];
    input event float evLeveldB         [[ name: "Level",  min: -100,  max:  0,    init: -30,  step: 0.1 ]];

    node envelopeFollower = EnvelopeFollower;
    node waveshaper = Waveshaper * 4;  // oversampling 4 times
    node level = Level;
    
    connection
    {
        // send event values to the processors
        evPreEQSwitch     ->  waveshaper.preEQStatus;
        evGaindB          ->  waveshaper.gaindBIn;
        evPosEQSwitch     ->  waveshaper.posEQStatus;
        evLeveldB         ->  level.evLeveldBIn;

        envelopeFollower.envEventOut     ->  waveshaper.envEventIn;

        // connect audio streams
        audioIn         ->  waveshaper.procAudioIn;
        waveshaper      ->  level.procAudioIn;
        level           ->  audioOut;
        audioIn         ->  envelopeFollower.audioIn;
    }
}

processor Waveshaper
{
    input  stream float procAudioIn;
    output stream float procAudioOut;
    input event float envEventIn;

    input event int preEQStatus;
    input event int posEQStatus;
    input event int distCurrent;
    input event float gaindBIn;

    event preEQStatus (int i)           { preEQStat = i; }
    event posEQStatus (int i)           { posEQStat = i; }
    event gaindBIn (float f)            { gaindB = f; }
    event envEventIn (float f)          { envEvent = f; }

    // configure static filters here
    var preFilter = std::filters::tpt::onepole::create(1,processor.frequency,450.0);
    var posFilter = std::filters::tpt::svf::create(0,processor.frequency,4000.0,1.0);

    int preEQStat;
    int posEQStat;
    float gain;
    float gaindB = 40.0f;
    float envEvent;

    int count = 0;

    // Main processing function
    void main()
    {
        float32 in;
        float32 outFilPre;
        float32 outGain;
        float32 outFilPos;
        float32 out;
        float32 x;
        float32 parameter;

        loop
        {
            updateVariables();

            // STAGE 1
            // power input values
            in = procAudioIn * gain;

            // STAGE 2
            // preprocessing by highpass filter
            if (preEQStat == 1)
            {
                outFilPre = preFilter.process(in);
            }
            else
            {
                outFilPre = in;
            }

            // STAGE 3
            // processing by waveshaper
            x = outFilPre;
            parameter = envEvent;
            outGain = (x * (abs(x) + parameter) / (x * x + (parameter - 1) * abs(x) + 1)) * 0.7f;                

            // STAGE 4
            // postprocessing by lowpass filter
            if (posEQStat == 1)
            {
                outFilPos = posFilter.process(outGain);
            }
            else
            {
                outFilPos = outGain;
            }

            // STAGE 5
            // send back processed signal
            procAudioOut <- float (outFilPos);

            advance();
        }
    }

    void updateVariables()
    {
        // gain update
        gain = std::levels::dBtoGain (gaindB);
    }
}





// poweramp processor to limit loudness
processor Level 
{
    input  stream float procAudioIn;
    output stream float procAudioOut;

    // the input to connect to the processor from outside
    input event float evLeveldBIn;

    // this is the event by the level poti
    event evLeveldBIn (float f)            { leveldB = f; }

    float level;
    float leveldB = 40.0f;

    void main()
    {
        float64 out;

        loop
        {
            updateVariables();

            out = procAudioIn * level;

            procAudioOut <- float (out);
            advance();
        }
    }
    
    void updateVariables()
    {
        // gain update
        level = std::levels::dBtoGain (leveldB);
    }
}



// This is a simple envelope follower that outputs the smoothed amplitude of an input signal
processor EnvelopeFollower
{
    input stream float audioIn; // The audio input
    output stream float envOut; // The envelope output
    output event float envEventOut; // The envelope output

    // Parameters for the envelope follower
    float attack = 0.01f; // The attack time in seconds
    float release = 0.1f; // The release time in seconds

    // Internal state variables
    float env = 0.0f; // The current envelope value
    float attCoeff = 0.0f; // The attack coefficient
    float relCoeff = 0.0f; // The release coefficient
    
    float sampleRate = 44100;

    int count = 0;

    void init()
    {
        // Calculate the coefficients based on the sample rate and the parameters
        attCoeff = exp (-1 / (sampleRate * attack));
        relCoeff = exp (-1 / (sampleRate * release));
    }

    void main()
    {
        loop
        {
            let in = abs (audioIn); // Get the absolute value of the input signal

            if (in > env) // If the input is higher than the current envelope value
            {
                env = attCoeff * (env - in) + in; // Apply a fast attack using a low-pass filter formula
            }
            else // If the input is lower than the current envelope value
            {
                env = relCoeff * (env - in) + in; // Apply a slow release using a low-pass filter formula
            }

            // event to change waveshaper parameter
            envEventOut <- env;
            //envOut <- env; // Output the envelope value

            advance(); // Advance to the next sample
        }
    }
}
